# -*- coding: utf-8 -*-
"""Flipkart_EDA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P0DlTb19kc5261Px1zfqnZ6xDJkj-dPM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

df = pd.read_csv("/content/flipkart_com-ecommerce_sample.csv", engine='python')

df.info()
df.shape

df.head()

df.describe()

df.isnull().sum()

df.duplicated().sum()

df.isnull().sum()

df["brand"] = df["brand"].fillna("Unknown")
df["product_specifications"] = df["product_specifications"].fillna("Unknown")

df["retail_price"] = df["retail_price"].fillna(df["retail_price"].median())
df["discounted_price"] = df["discounted_price"].fillna(df["discounted_price"].median())

df_drop_columns = df["description"].dropna(inplace=True)

df.isnull().sum()

df.dropna(subset=["image", "description"], inplace=True)

display(df.isnull().sum())

df["product_rating"] = pd.to_numeric(df["product_rating"], errors="coerce")
df["AVG_product_rating"] = df.groupby("product_name")["product_rating"].transform("mean")

df['overall_rating'] = pd.to_numeric(df["overall_rating"], errors="coerce")
df["Product_Overall_rating"] = df.groupby("product_name")["overall_rating"].transform("mean")

df[["retail_price", "discounted_price"]] = df[["retail_price", "discounted_price"]].apply(
    pd.to_numeric, errors="coerce"
)

df["Product_retail_price"] = df.groupby

# Display the first few rows of the dataframe
display(df.head())

# Get information about the dataframe, including data types and non-null values
display(df.info())

# Get descriptive statistics of the numerical columns
display(df.describe())

# Check for missing values
display(df.isnull().sum())

# Check for duplicate rows
display(df.duplicated().sum())

# Get the unique values and their counts for a categorical column (example: 'brand')
display(df['brand'].value_counts())

# Visualize the distribution of a numerical column (example: 'retail_price') using a histogram
plt.figure(figsize=(10, 6))
sns.histplot(df['retail_price'], kde=True)
plt.title('Distribution of Retail Price')
plt.xlabel('Retail Price')
plt.ylabel('Frequency')
plt.show()

# Visualize the distribution of a categorical column (example: 'brand') using a bar plot
plt.figure(figsize=(12, 6))
sns.countplot(data=df, y='brand', order=df['brand'].value_counts().index[:10]) # Display top 10 brands
plt.title('Top 10 Brands')
plt.xlabel('Count')
plt.ylabel('Brand')
plt.show()

# Visualize the relationship between two numerical columns (example: 'retail_price' and 'discounted_price') using a scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='retail_price', y='discounted_price')
plt.title('Retail Price vs. Discounted Price')
plt.xlabel('Retail Price')
plt.ylabel('Discounted Price')
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(data=df[df["product_category_tree"].isin(
        df["product_category_tree"].value_counts().head(10).index
    )], x='retail_price', y="product_category_tree")
plt.title("Product Category vs. Retail Price")
plt.xlabel("Product Category")
plt.ylabel("Retail Price")
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(data=df[df["product_category_tree"].isin(df["product_category_tree"].value_counts().head(10).index)], x="discounted_price", y= "product_category_tree")
plt.title("Product Category vs. Discounted Price")
plt.xlabel("Discounted Price")
plt.ylabel("Product Category")
plt.xticks(rotation=90)
plt.show()

# Drop the problematic column before saving
df_cleaned = df.drop(columns=['Product_retail_price'])

# Save the cleaned dataframe to a CSV file
df_cleaned.to_csv("cleaned_flipkart_eda.csv", index=False)